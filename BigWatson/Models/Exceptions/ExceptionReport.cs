using System;
using BigWatsonDotNet.Interfaces;
using JetBrains.Annotations;

namespace BigWatsonDotNet.Models.Exceptions
{
    /// <summary>
    /// A class that represents a standalone crash report
    /// </summary>
    public sealed class ExceptionReport : ILog
    {
        #region Properties

        /// <summary>
        /// Gets the type of the exception for this crash report
        /// </summary>
        [NotNull]
        public String ExceptionType { get; }

        /// <summary>
        /// Gets the HResult associated to the exception
        /// </summary>
        public int HResult { get; }

        /// <summary>
        /// Gets the message that was generated when the Exception was thrown
        /// </summary>
        [NotNull]
        public String Message { get; }

        /// <summary>
        /// Gets the source of the Exception, if present
        /// </summary>
        [NotNull]
        public String Source { get; }

        /// <summary>
        /// Gets the StackTrace for the current Exception
        /// </summary>
        [NotNull]
        public String StackTrace { get; }

        /// <inheritdoc/>
        public DateTime Timestamp { get; }

        /// <inheritdoc/>
        public Version AppVersion { get; }

        /// <summary>
        /// Gets the amount of memory that the app was using when the Exception was thrown
        /// </summary>
        public long UsedMemory { get; }

        #endregion

        #region Additional parameters

        /// <summary>
        /// Gets the minimum app version that generated this Exception type
        /// </summary>
        [NotNull]
        public Version MinExceptionVersion { get; }

        /// <summary>
        /// Gets the maximum app version that generated this Exception type
        /// </summary>
        [NotNull]
        public Version MaxExceptionVersion { get; }

        /// <summary>
        /// Gets the total number of times this Exception type was generated by the app
        /// </summary>
        public int ExceptionTypeOccurrencies { get; }

        /// <summary>
        /// Gets the most recent crash time for this Exception type
        /// </summary>
        public DateTime MostRecentCrashTime { get; }

        /// <summary>
        /// Gets the first time this Exception type was generated
        /// </summary>
        public DateTime LeastRecentCrashTime { get; }

        #endregion

        internal ExceptionReport(
            [NotNull] RealmExceptionReport report,
            [NotNull] String min, [NotNull] String max, int occurrences,
            DateTimeOffset recent, DateTimeOffset old)
        {
            // Primary
            ExceptionType = report.ExceptionType;
            HResult = report.HResult;
            Message = report.Message ?? String.Empty;
            Source = report.Source ?? String.Empty;
            StackTrace = report.StackTrace ?? String.Empty;
            AppVersion = Version.Parse(report.AppVersion);
            Timestamp = report.Timestamp.LocalDateTime;
            UsedMemory = report.UsedMemory;

            // Secondary
            MinExceptionVersion = Version.Parse(min);
            MaxExceptionVersion = Version.Parse(max);
            ExceptionTypeOccurrencies = occurrences;
            MostRecentCrashTime = recent.LocalDateTime;
            LeastRecentCrashTime = old.LocalDateTime;
        }
    }
}